{"repo_token":"hn987RDX5FcfXypkjnJBQdFwsGKG4cO89VFsV","git":{"head":{"id":"f849fcc73ff0cc85f82eaa5cd8b2cf45498ad615","author_name":"Pritam Kadam","author_email":"phkadam2008@gmail.com","committer_name":"Pritam Kadam","committer_email":"phkadam2008@gmail.com","message":"Pritam :  travis."},"branch":"master","remotes":[{"name":"origin","url":"git@github.com:kpritam/travis-ci-sample.git"}]},"source_files":[{"name":"csw-location/src/main/scala/org/tmt/csw/location/Hello.scala","source":"package org.tmt.csw.location\n\nobject Hello extends Greeting with App {\n  val x : Int = 15\n  val y : Int = 18\n\n  if (x < y){\n    println(s\"x : $x\")\n  }\n\n}\n\ntrait Greeting {\n  lazy val greeting: String = \"hello\"\n}","coverage":[null,null,null,0,0,null,0,0,null,null,null,null,null,null,null]},{"name":"csw-location/src/main/scala/org/tmt/csw/location/ComponentId.scala","source":"package org.tmt.csw.location\n\nimport scala.util.Try\n\n/**\n * Used to identify a component\n *\n * @param name the service name\n * @param componentType HCD, Assembly, Service\n */\ncase class ComponentId(name: String, componentType: ComponentType) {\n  override def toString = s\"$name-$componentType\"\n}\n\nobject ComponentId {\n  /**\n   * Gets a ComponentId from a string, as output by ComponentId.toString\n   */\n  def parse(s: String): Try[ComponentId] = {\n    val (name, typ) = s.splitAt(s.lastIndexOf('-'))\n    ComponentType.parse(typ.drop(1)).map(ComponentId(name, _))\n  }\n}\n","coverage":[null,null,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,1,1,null,null,null]},{"name":"csw-location/src/main/scala/org/tmt/csw/location/ComponentType.scala","source":"package org.tmt.csw.location\n\nimport scala.util.{Failure, Success, Try}\n\n/**\n * CSW Component types\n */\nsealed trait ComponentType\n\nobject ComponentType {\n\n  /**\n   * A container for components (assemblies and HCDs)\n   */\n  case object Container extends ComponentType\n\n  /**\n   * A component that controls a hardware device\n   */\n  case object HCD extends ComponentType\n\n  /**\n   * A component that controls one or more HCDs or assemblies\n   */\n  case object Assembly extends ComponentType\n\n  /**\n   * A general purpose service component (actor and/or web service application)\n   */\n  case object Service extends ComponentType\n  /**\n   * Exception thrown when a string can not be parsed to a component type\n   */\n  case class UnknownComponentTypeException(message: String) extends Exception(message)\n\n  /**\n   * Returns the named component type or an UnknownComponentTypeException exception if not known\n   */\n  def parse(name: String): Try[ComponentType] = name.toLowerCase match {\n    case \"container\" => Success(Container)\n    case \"assembly\"  => Success(Assembly)\n    case \"hcd\"       => Success(HCD)\n    case \"service\"   => Success(Service)\n    case x           => Failure(UnknownComponentTypeException(x))\n  }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,0,0,1,0,0,null,null]},{"name":"csw-location/src/main/scala/org/tmt/csw/location/common/Networks.scala","source":"package org.tmt.csw.location.common\n\nimport java.net.{Inet6Address, InetAddress, NetworkInterface}\n\nimport scala.collection.JavaConverters._\n\nobject Networks {\n\n  def getPrimaryIpv4Address: InetAddress = Pair.all\n    .sortBy(_.index)\n    .find(_.isIpv4)\n    .getOrElse(Pair.default)\n    .addr\n\n  private case class Pair(index: Int, addr: InetAddress) {\n    def isIpv4: Boolean = {\n      // Don't use ipv6 addresses yet, since it seems to not be working with the current akka version\n      !addr.isLoopbackAddress && !addr.isInstanceOf[Inet6Address]\n    }\n  }\n\n  private object Pair {\n    def all: List[Pair] = for {\n      iface <- NetworkInterface.getNetworkInterfaces.asScala.toList\n      if iface.isUp && iface.supportsMulticast\n      a <- iface.getInetAddresses.asScala\n    } yield Pair(iface.getIndex, a)\n\n    def default: Pair = Pair(0, InetAddress.getLocalHost)\n  }\n}","coverage":[null,null,null,null,null,null,null,null,null,0,0,0,0,null,null,null,null,0,null,null,null,null,null,0,0,0,0,null,0,null,null]}]}